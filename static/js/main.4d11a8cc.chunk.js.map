{"version":3,"sources":["components/start-form/index.js","components/start-form/start-form.js","components/get-api/get-api.js","components/header/index.js","components/header/header.js","components/result/index.js","components/result/result.js","components/app/index.js","components/app/app.js","serviceWorker.js","index.js"],"names":["Form","classNames","closeModal","className","onClick","GetInform","a","fetch","_apiBase","res","ok","Error","status","json","this","Question","question","id","incorrect_answers","selected","classn","useState","setAnswer","key","filter","item","pos","indexOf","map","text","index","Result","playAgain","App","props","askQuestion","getQuestion","then","setState","questionBank","results","cons","console","log","state","compareAnswer","answer","correctAns","score","responses","isClose","i","length","app","concat","correct_answer","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4d11a8cc.chunk.js","sourcesContent":["import Form from './start-form';\r\nexport default Form;","import React, {Component} from 'react';\r\nimport './form.css';\r\n\r\n\r\nconst Form= ({classNames, closeModal})=>{\r\n\r\n  \r\n    return(\r\n    <div className={classNames}>\r\n    <h1>\r\n        Do you want to start the Quiz?\r\n    </h1>\r\n    <button onClick={closeModal}>Yes</button>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n","\r\n\r\nexport default class GetInform {\r\n    constructor() {\r\n        this._apiBase = 'https://opentdb.com/api.php?amount=10&category=23&difficulty=easy&type=multiple';\r\n    }\r\n\r\n    GetInform  = async () => {\r\n        const res = await fetch(`${this._apiBase}`);\r\n    \r\n        if (!res.ok) {\r\n          throw new Error(`Could not fetch +` +\r\n            `, received ${res.status}`);\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    getQuestion(){\r\n        return this.GetInform()\r\n     \r\n    }\r\n\r\n}","import Question from './header';\r\nexport default Question;","import React, {useState} from 'react';\r\nimport GetInform from '../get-api/get-api'\r\nconst Question = ({question, id ,incorrect_answers,selected, classn}) => { \r\n    if (id){\r\n        classn='';\r\n    }\r\n    const [answer, setAnswer] = useState(incorrect_answers); \r\n        return(\r\n            <div key={id} className={classn}>\r\n                 <h2>{question}</h2>\r\n                 \r\n                     <ul>{incorrect_answers.filter(function(item, pos) {\r\n    return incorrect_answers.indexOf(item) == pos}).map((text, index) => ( \r\n         <li> <button \r\n              key={index} \r\n              className=\"answerBtn\"\r\n              onClick={()=>{ \r\n                setAnswer(); \r\n                selected(text); \r\n              }}\r\n              \r\n               >{text} \r\n         </button> </li>\r\n        ))} \r\n                 </ul>\r\n                \r\n\r\n            </div>\r\n        )\r\n    }\r\n    \r\n  export default Question","import Result from './result';\r\nexport default Result;","import React from 'react';\r\n\r\n\r\nconst Result = ({playAgain, classNames}) => {\r\n    return(\r\n    <div className={classNames}> \r\n      <button className=\"playBtn\" onClick={playAgain} > Play Again </button> \r\n    </div> \r\n  ) \r\n}    \r\n  export default Result; ","import App from './app';\r\nexport default App;","import React, {\r\n  Component\r\n} from 'react';\r\nimport Form from '../start-form';\r\nimport GetInform from '../get-api/get-api'\r\nimport Question from '../header';\r\nimport Result from '../result';\r\nimport './app.css';\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questionBank: [],\r\n      score: 0,\r\n      responses: 0,\r\n      isClose:false,\r\n      \r\n    };\r\n\r\n  }\r\n  GetInform = new GetInform();\r\n  askQuestion = () => {\r\n\r\n    this.GetInform.getQuestion().then(question => {\r\n      this.setState({\r\n        questionBank: question.results\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  cons=()=>{\r\n   \r\n    console.log(this.state.questionBank)\r\n  }\r\n\r\n  compareAnswer = (answer, correctAns) => {\r\n    if (answer === correctAns) {\r\n      this.setState({\r\n        score: this.state.score + 1\r\n      });\r\n\r\n    }\r\n    this.setState({ \r\n      responses: this.state.responses < 10\r\n        ? this.state.responses + 1 \r\n        : 5 \r\n    }); \r\n\r\n  }\r\n\r\n\r\n  playAgain = () => { \r\n    this.askQuestion();\r\n    this.setState({score: 0, responses: 0}); \r\n  }; \r\n\r\n  componentDidMount() {\r\n    \r\n    this.askQuestion();\r\n  }\r\n  closeModal = () => {\r\n      this.setState({ isClose: true });\r\n    }\r\n\r\n\r\n  render() {\r\n    let {questionBank, isClose, score, responses} = this.state;\r\n      for (let i = 0; i < questionBank.length; i++) {\r\n        questionBank[i].id=i;}\r\n \r\n    let classNames='form-start';\r\n    let app='app',\r\n    hiden='isClose';\r\n\r\n    if(isClose){\r\n            classNames+=' isClose';\r\n            app+=' show';\r\n            \r\n            \r\n        } \r\n    const questions=questionBank.map((item)=>{\r\n\r\n   \r\n      item.incorrect_answers=item.incorrect_answers.concat(item.correct_answer);})\r\n    return ( \r\n     <>\r\n     \r\n     <Form  classNames={classNames} closeModal={this.closeModal}/>\r\n    \r\n      <div className={app}>\r\n      \r\n      <h1 >Quiz</h1> \r\n      <div className=\"score\"> Your score is {score} / {questionBank.length}</div>\r\n      {questionBank.map(({question, incorrect_answers, \r\n       correct_answer, id}) => <Question question= \r\n       {question} incorrect_answers={incorrect_answers} key={id} \r\n       selected={answer => this.compareAnswer(answer, correct_answer)} classn={(id==responses)? '':hiden}/>)} \r\n      <Result playAgain={this.playAgain} classNames={(responses==questionBank.length)? '':hiden}/>\r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}